---
categories: [] # This variable gets populated when the playbook runs | Note [] tells Ansible this var should hold a list
entries:
  - title: Highlighting matching brackets in Zed
    date: "2025.03.26"
    category: zed
    content: |
      I'm currently trying out Zed as an editor for my personal projects. Although I am very impressed, Zed does have its shortcomings...

      In its current state Zed does not support rainbow brackets. I find this to be quite cumbersome as I'm not able to glance if there are missing brackets in a large chunk of code; this is not optimal for my productivity to say the least.

      Fortunately [OddMastodon4038 on Reddit](https://old.reddit.com/r/ZedEditor/comments/1er81tt/is_bracket_highlighting_a_feature/lhymm51/) had a nice workaround that I actually ended up liking way more than using full-on rainbow brackets. Zed is quite minimal and after enabling only the bare minimal productivity ~~distractions~~ features I actually noticed being able to focus better! Neat!

      > [!Tip]
      > You can find my full Zed configuration file in [my dotfiles repository](https://github.com/bvdbasch/dotfiles/tree/master/roles/zed)!

      Anway, here are the highlighting settings I've used:
      ```json
      "indent_guides": {
        "background_coloring": "disabled",
        "coloring": "indent_aware",
        "active_line_width": 1
      },
      "experimental.theme_overrides": {
        "editor.document_highlight.read_background": "#6A3D88"
      }
      ```
    sources:
      - text: "Is bracket highlighting a feature?"
        link: "https://old.reddit.com/r/ZedEditor/comments/1er81tt/is_bracket_highlighting_a_feature/lhymm51/"
    tags: development, ide, editors, code-highlighting
  # - END OF POST
  - title: Hiding all windows except the currently active window on Mac
    date: "2025.03.26"
    category: macos
    content: |
      Sometimes I like to keep distraction to a minimum and just have the current window floating on the background. Hiding all windows individually is a pain.  Fortunately there is an option to hide all windows except the currently active window!

      Here's the keyboard shortcut: `alt ‚å•` + `cmd ‚åò` + `H`
    sources:
      - text: "MInimize all windows except active"
        link: "https://apple.stackexchange.com/questions/119953/minimize-all-windows-except-active"
    tags: apple, macos, productivity, workflow, keyboard-shortcuts
  # - END OF POST
  - title: Showing Swatch Internet time in your terminal (.beats)
    date: "2025.03.17"
    category: linux
    content: |
      I am sucker for [Swatch Internet Time](https://www.wnyc.org/story/15-internet-time/) and wanted to add it to my zsh prompt.

      Here is the command line magic that made it happen: `echo '@'$(TZ=GMT-1 date +'(%-S + %-M * 60 + %-H * 3600) / 86.4'|bc)`
    sources:
      - text: "Bash alias to output the current Swatch Internet Time"
        link: "https://www.commandlinefu.com/commands/view/25323/bash-alias-to-output-the-current-swatch-internet-time"
    tags: devops, shell, scripting, zsh, swatch, internet-time, .beats

  - title: Combining multiple files into a PDF on Mac
    date: "2025.01.23"
    category: macos
    content: |
      I found a backup of an old NES manual where someone had scanned each page separately and then bundled all the images in a single `.zip` file. For my purposes I wanted to have all the images in a single PDF though. Luckily you can quickly combine multiple files into a PDF right from your desktop or a finder window.

      Here's how to do it:

      1. Select the files you want to combine
      2. Right-click the selected files and then choose quick actions
      3. From the quick actions menu select `Create PDF`.zip

      That's it! Enjoy your new PDF document üòé
    sources:
      - text: "Combine files into a PDF on Mac"
        link: "https://support.apple.com/guide/mac-help/combine-files-into-a-pdf-mchl21ac2368/mac"
    tags: apple, macos, pdf, quick-actions
  # - END OF POST
  - title: Securely wipe a disk in Linux
    date: "2024.12.02"
    category: security
    content: |
      New laptop. Bring back old. Always do zhe wipe! Forgot how to do it because it has been so long.

      Many different utils, but shred be my fav.

      My process:
      - rm files from terminal first
      - then wipe entire disk with shred.
      - I use this command: `shred <disk> -
      - sudo shred -v -n 1 -z /dev/sda
      verbose so we see the progress, 1 pass is enough, do a last pass with all 0 to make it look like a blank disk
    sources:
      - text: "3 Best Ways to Securely Wipe Disk in Linux"
        link: "https://linuxiac.com/best-ways-to-securely-erase-disk-in-linux/"
      - text: "How to Securely Erase a Disk and File using the Linux shred Command"
        link: "https://www.freecodecamp.org/news/securely-erasing-a-disk-and-file-using-linux-command-shred/"
    tags: linux, unix, shell, data-protection
  # - END OF POST
  - title: Pin a file or folder to the dock in MacOS
    date: "2024.10.23"
    category: macos
    content: |
      When attempting to drag a file or folder straight from finder into the dock, you might be suprised to discover that this does not work. Quite strange when you consider most actions in macOS are very much drag-drop oriented.

      > [!TIP]
      > Pressing `control` + `shift` + `‚åò` + `T` is the keyboard shortcut for "Add to Dock" when a file or folder is highlighted in Finder!

      However, not being able to simply drag a file into the dock doesn't mean it is impossible. Here's how to do it:

      1. Within finder navigate to the file or you'd like to pin to the dock.
      2. In the global menu click on the `File` menu option while holding down the `shift` key on the keyboard.
      3. Click the *Add to Dock* option and the file or folder will now be pinned to the dock!
    sources:
      - text: "How to Pin a Folder or a File to Your Mac's Dock"
        link: "https://www.howtogeek.com/712237/how-to-pin-a-folder-or-a-file-to-your-macs-dock/"
    tags: apple, macos, dock, finder, workflow, productivity
  # - END OF POST
  - title: Using the present working directory as a value for your environment variables
    date: "2024.10.10"
    category: linux
    content: |
      I use a [custom git-cliff configuration](https://github.com/bvdbasch/dotfiles/blob/master/roles/git/templates/cliff.toml.j2) for generating changelogs. The changelog it produces is fantastic, but unfortunately - by default - git-cliff does *not* export the generated changelog to a file.

      There is an environment variable you can set called `GIT_CLIFF_OUTPUT` which will instruct git-cliff to always store the generated changelog in that location. Great, but what about multiple projects in multiple locations?

      Well, I realized that when you're asking git-cliff to generate a changelog you are most likely already in the project folder, so using the current directory as the value for the output location would work. We know the `pwd` command (present working directory) produces the exact output we need, but simply putting this into an the environment variable **will not work**.

      To be very clear: `GIT_CLIFF_OUTPUT="pwd/CHANGELOG.md"` will not do anything, because pwd gets treated as text and not as a command. So how do we make sure that it does get treated as a command? Simple: just wrap it in parenthesis and prepend it with a dollar sign `$(pwd)` :D

      So the final solution is: `GIT_CLIFF_OUTPUT="$(pwd)/CHANGELOG.md"`, which will create the changelog in the current directory. Perfect.
    sources:
      - text: "This saves the absolute path of the current working directory to the variable cwd"
        link: "https://stackoverflow.com/a/13275062"
    tags: devops, shell, scripting, zsh, git, git-cliff
  # - END OF POST
  - title: Viewing the status of a specific service
    date: "2024.07.30"
    category: linux
    content: |
      I had to verify that a service on a remote server was still working as intended afer applying a configuration change. Luckily checking this is a breeze, because when you know the name of a service you can see how it is doing with the following command:

      ```sh
      systemctl status <service_name_here>
      ```

      As an example: running `systemctl status lighttpd.service` will yield:

      ```sh
      ‚óè lighttpd.service - Lighttpd Daemon
      Loaded: loaded (/lib/systemd/system/lighttpd.service; enabled; vendor preset: enabled)
      Active: active (running) since Tue 2020-08-04 04:29:19 UTC; 3 weeks 2 days ago
      Main PID: 105 (lighttpd)
      Tasks: 1 (limit: 115783)
      Memory: 56.5M
      CGroup: /system.slice/lighttpd.service
              ‚îî‚îÄ105 /usr/sbin/lighttpd -D -f /etc/lighttpd/lighttpd.conf

      Aug 04 04:29:19 utls-bash-wiki systemd[1]: Starting Lighttpd Daemon...
      Aug 04 04:29:19 utls-bash-wiki systemd[1]: Started Lighttpd Daemon.
      ```
    sources:
      - text: "How to view status of a service on Linux using systemctl"
        link: "https://www.cyberciti.biz/faq/systemd-systemctl-view-status-of-a-service-on-linux/"
    tags: devops, shell, sudo, services, logging, unix
  # - END OF POST
  - title: Change the default folder when saving screenshots on MacOS
    date: "2024.07.02"
    category: macos
    content: |
      By default MacOS saves all screenshots to your desktop. This may be fine for some, but for me it is far from ideal. I'd rather have th e screenshots saved to a dedicated screenshots folder. The commands below achieve that.

      ```zsh
      $ defaults write com.apple.screencapture location <new_folder_location>
      $ killall SystemUIServer
      ```

      The first command `defaults write ...` sets the new default location

      The second command `killall` kills the lingering processes, making sure that the new location takes effect the next time you take a screenshot.

      ## Bonus
      I keep forgetting that the screenshot utility has some nifty keyboard shortcuts, so I've jotted the ones I'm interested in here:

      1. When you take a screenshot with `cmd + shift + 4` you can press `space`` to toggle between region and full window for your current screenshot
      2. Use `cmd + shift + 3` to take a screenshot of the whole flippin' screen
    sources:
      - text: "MacOS screenshot utility keyboard shortcuts"
        link: "https://support.apple.com/guide/mac-help/take-a-screenshot-mh26782/mac"
      - text: "How to change the default screenshot save location"
        link: "http://osxdaily.com/2011/01/26/change-the-screenshot-save-file-location-in-mac-os-x/"
    tags: apple, macos, screenshots, plist
  # - END OF POST
  - title: Make TextEdit.app on MacOS behave more like Windows Notepad (notepad.exe)
    date: "2024.04.05"
    category: macos
    content: |
      Say what you will about Windows, but Notepad.exe is a great tool. It just treats text as plain text. When first switching to macOS you come to find that Notepad.exe is TextEdit.app, but the problem is that well... It doesn't do plain text out of the box. Instead it does rich text formatting. Fortunately Apple gave us the ability to set plain text as the default. Hurray!

      Here's how to do it:

      1. Open settings (`‚åò` + `,`)
      2. On the `New Document` tab in the settings window select the option `Plain text`

      Going forward any new document you create in TextEdit will automatically be in plain text and will be saved as a .txt file. YES!
    sources:
      - text: "How to use .txt Plain Text by default in TextEdit"
        link: "https://www.idownloadblog.com/2016/12/26/how-to-use-plain-text-by-default-in-textedit/"
    tags: apple, macos, notepad, notepad++, textedit, plain-text
  # - END OF POST
  - title: Install any zsh plugin with antigen directly from a github repository
    date: "2024.01.24"
    category: shell
    content: |
      Sometimes a shell plugin has instructions on how to install itself with antigen. For example [popstas/zsh-command-time](https://github.com/popstas/zsh-command-time) has the following instructions [in their README](https://github.com/popstas/zsh-command-time?tab=readme-ov-file#install-with-antigen):

      > ```Markdown
      > # Install with antigen
      > `antigen bundle popstas/zsh-command-time`
      > ```

      The above is a fairly common way of adding a plugin to your shell. But what do you do when you stumble upon a repository of a plugin that does not have this? Like the [tom-auger/cmdtime repository](https://github.com/tom-auger/cmdtime). When you try: `antigen bundle tom-auger/cmdtime` you'll see the following error `Installing tom-auger/cmdtime... Error! Activate logging and try again.` staring right at you!

      What then is the solution? A quite straightforward actually:

      1. Locate the antigen plugin directory on your harddrive
      2. Clone the repository directly in that directory
      3. Reload your shell and voila! Now you can use the plugin
    tags: shell, unix, zsh, plugins, antigen
  # - END OF POST
  - title: Setting up a new Python virtual environment with Poetry and PyEnv
    date: "2024.01.11"
    category: python
    content: |
      Today I had to set up a small python project from scratch rather than continuing from a pre-existing project. Since I've only had to deal with projects already containing a `pyproject.toml` this was a new experience for me. Here's how I did it

      ## Create the environment, add the dependencies and jump into the shell
      > [!NOTE]
      > Prerequisites: [PyEnv](https://github.com/pyenv/pyenv) and [Poetry](https://github.com/python-poetry/poetry)

      ```sh
      $ cd <target_dir>
      $ poetry init  # follow on the on screen instructions
      $ poetry shell # spawn environment shell
      ```
    tags: python, poetry, dependency-management, pyenv, venv
  # - END OF POST
  - title: Enable using Touch ID for sudo commands
    date: "2023.05.17"
    category: macos
    content: |
      > [!IMPORTANT]
      > This used to be done by editing the file `/etc/pam.d/sudo` but this file gets reset to default after changes such as security updates. Use the file `/etc/pam.d/sudo_local` instead!

      > [!TIP]
      > Check out the  Ansible template file [here](https://github.com/bvdbasch/dotfiles/blob/master/roles/macos/templates/sudo_local.j2) and the Ansible task [here](https://github.com/bvdbasch/dotfiles/blob/20df2f90e8e706cdb5a3de7f0980b99d91647809/roles/macos/tasks/main.yml#L14) to automate this with Ansible! ü§ô

      I was recently handed a new company Macbook with device management policies. A strong password policy is enforced on the machine (as it should). However, this is quite the hassle with sudo (spare my fingers plzzzz) so I needed a method to authorize sudo commands with Touch ID. Luckily this was really straightforward by following the steps underneath.

      1. Create a file called `sudo_local.j2` in `/etc/pam.d`.
      2. Ensure the file has the following line: `auth       sufficient     pam_tid.so`
      3. Restart your terminal
      4. Done
    sources:
      - text: "üá≥üá± Touch ID gebruiken bij een sudo commando in Terminal en iTerm 2"
        link: "https://www.appletips.nl/terminal-touch-id-sudo"
    tags: apple, macos, sudo, terminal, touch-id
